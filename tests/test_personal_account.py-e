from pages.main_page import MainPage
from pages.personal_account_page import PersonalAccountPage
from pages.login_page import LoginPage
import pytest

@pytest.fixture
def authorized_user(browser, registered_user):
    """Фикстура для авторизованного пользователя"""
    main_page = MainPage(browser)
    main_page.open()
    main_page.click_login_button()

    login_page = LoginPage(browser)
    login_page.login(registered_user['email'], registered_user['password'])

    return registered_user


def test_go_to_personal_account(browser, authorized_user):
    """Проверка перехода в личный кабинет"""
    main_page = MainPage(browser)
    main_page.click_personal_account_button()

    account_page = PersonalAccountPage(browser)
    account_page.should_be_profile_section()


def test_go_from_personal_account_to_constructor(browser, authorized_user):
    """Проверка перехода из ЛК в конструктор"""
    main_page = MainPage(browser)
    main_page.click_personal_account_button()

    account_page = PersonalAccountPage(browser)
    account_page.click_constructor_link()

    assert "stellarburgers" in browser.current_url
    main_page.should_be_order_button()


def test_go_from_personal_account_via_logo(browser, authorized_user):
    """Проверка перехода через логотип"""
    main_page = MainPage(browser)
    main_page.click_personal_account_button()

    account_page = PersonalAccountPage(browser)
    account_page.click_logo()

    assert "stellarburgers" in browser.current_url
    main_page.should_be_order_button()


def test_logout(browser, authorized_user):
    """Проверка выхода из аккаунта"""
    main_page = MainPage(browser)
    main_page.click_personal_account_button()

    account_page = PersonalAccountPage(browser)
    account_page.logout()

    assert "login" in browser.current_url
    login_page = LoginPage(browser)
    login_page.should_be_login_form()
